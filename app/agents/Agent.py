from abc import ABC, abstractmethod
from typing import Any, Dict, Optional, List
from langchain_core.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain_core.runnables import RunnableSequence
from langchain_core.language_models.llms import BaseLLM

class BaseLangChainAgent(ABC):
    """
    Base class for all LangChain agents.
    """

    def __init__(self, llm: BaseLLM, tools: Optional[List[Any]] = None, memory: Optional[ConversationBufferMemory] = None):
        """
        Initializes the agent with a name, a language model (LLM), tools, and memory.
        
        :param llm: Language model (LLM) that the agent will use.
        :param tools: List of tools available to the agent (optional).
        :param memory: Memory to maintain conversation context (optional).
        """
        self.llm = llm
        self.tools = tools or []
        self.memory = memory or ConversationBufferMemory()
        self.chain = self._initialize_chain()

    @abstractmethod
    def _initialize_chain(self) -> RunnableSequence:
        """
        Initializes the LangChain chain that the agent will use.
        This method must be implemented by subclasses.

        :return: An instance of LLMChain.
        """
        pass

    @abstractmethod
    def get_prompt_template(self) -> str:
        """
        Returns the prompt template that the agent will use.
        This method must be implemented by subclasses.

        :return: A string with the prompt template.
        """
        pass

    def process_input(self, input_text: str) -> str:
        """
        Processes the input text using the LangChain chain.

        :param input_text: Input text.
        :return: Response generated by the agent.
        """
        if not self.chain:
            raise ValueError("The chain has not been initialized.")
        response = self.chain.run(input=input_text)
        return response

    def add_tool(self, tool: Any):
        """
        Adds a tool to the agent.

        :param tool: Tool to add.
        """
        self.tools.append(tool)
        print(f"Tool '{tool.name}' added to agent '{self.name}'.")

    def clear_memory(self):
        """
        Clears the agent's memory.
        """
        self.memory.clear()
        print(f"Memory of agent '{self.name}' cleared.")